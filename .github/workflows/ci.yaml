name: ci

on:
  push:
    branches: [ main, release-* ]
    tags:
      'v*'
  pull_request:
    branches: [ main ]

jobs:
  # This is a super hacky way to get this into a place that can actually be
  # used by downstream jobs because YAML values don't allow shell
  # interpolation, only github expression interpolation
  store-sha8:
    name: Store The Short Hash
    runs-on: ubuntu-latest
    outputs:
      sha8: ${{ steps.calc-short.outputs.sha8 }}
    steps:
      - name: Calculate Short Hash
        id: calc-short
        run: echo "::set-output name=sha8::${GITHUB_SHA::8}"

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: [store-sha8]
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
         name: "Linux-Qt5"
            , os: ubuntu-20.04
            , QT_VERSION: 5.15.2 , QT_INST_DIR: /opt
            , QT_STRING: "Qt5"
            , extraCMakeConfig: "-DCMAKE_INSTALL_PREFIX=/usr -DQT_DEFAULT_MAJOR_VERSION=5"
          }
        - {
            name: "Linux-Qt6"
            , os: ubuntu-20.04
            , QT_VERSION: 6.2.4, QT_INST_DIR: /opt
            , QT_STRING: "Qt6"
            , extraCMakeConfig: "-DCMAKE_INSTALL_PREFIX=/usr -DQT_DEFAULT_MAJOR_VERSION=6"
            , linuxDeployQtPath: "export PATH=$PATH:/opt/Qt/6.2.4/gcc_64/libexec"
          }
        - {
            name: "Mac-Qt5"
            , os: macos-latest
            , QT_VERSION: 5.15.2 , QT_INST_DIR: /Users/runner
            , QT_STRING: "Qt5"
            , extraCMakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=5"
          }
        - {
            name: "Mac-Qt6"
            , os: macos-latest
            , QT_VERSION: 6.2.4 , QT_INST_DIR: /Users/runner
            , QT_STRING: "Qt6"
            , extraCMakeConfig: "-DQT_DEFAULT_MAJOR_VERSION=6"
          }
        - {
            name: "Windows-Qt5", WIN_ARCH: "x64"
            , os: windows-2019
            , QT_VERSION: 5.15.2, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019_64", QT_ARCH: win64_msvc2019_64
            , QT_STRING: "Qt5"
            , extraCMakeConfig: "-G Ninja -DQT_DEFAULT_MAJOR_VERSION=5"
          }
        - {
            name: "Windows-Qt6", WIN_ARCH: "x64"
            , os: windows-2019
            , QT_VERSION: 6.2.4, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/6.2.4/msvc2019_64", QT_ARCH: win64_msvc2019_64
            , QT_STRING: "Qt6"
            , extraCMakeConfig: "-G Ninja -DQT_DEFAULT_MAJOR_VERSION=6"
          }
    steps:
    - name: Set artifact name
      shell: bash
      run: echo "name=ashirt-${{ needs.store-sha8.outputs.sha8 }}-${{matrix.config.QT_STRING}}-$RUNNER_OS" >> $GITHUB_ENV
    - name: Check out code
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --tags --force

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{matrix.config.QT_INST_DIR}}/Qt
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-qt-${{ matrix.config.QT_VERSION }}

    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{matrix.config.WIN_ARCH}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
       aqtversion: ==2.0.0
       py7zrversion: ==0.16.2
       dir: ${{matrix.config.QT_INST_DIR}}
       arch: ${{ matrix.config.QT_ARCH }}
       version: ${{ matrix.config.QT_VERSION }}
       cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install Dependencies
      if: (runner.os == 'Windows') || (runner.os == 'Linux')
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update > /dev/null && sudo apt-get install -qqq libxcb-keysyms1-dev libxkbcommon-dev > /dev/null
        elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ninja --ignore-checksums
        fi

    - name: Build
      shell: bash
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release ${{matrix.config.extraCMakeConfig}}
        cmake --build .

    - name: AppImage (Linux)
      if: runner.os == 'Linux' && !contains(github.ref, 'tags/v') && !contains(github.ref, 'refs/heads/main') && !contains(github.ref, 'refs/heads/release-')
      run: |
        wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod a+x linuxdeploy*.AppImage
        export VERSION=${{ needs.store-sha8.outputs.sha8 }}-${{ matrix.config.QT_STRING }}
        ${{matrix.config.linuxDeployQtPath}}
        ./linuxdeploy-x86_64.AppImage --appdir=appdir  --output appimage \
          -e ashirt \
          -d linux/ashirt.desktop \
          -i linux/icons/128x128/apps/ashirt.png \
          --plugin=qt
        mkdir -p dist
        # file should be named ashirt-${{ needs.store-sha8.outputs.sha8 }}-x86_64.AppImage
        mv ashirt*.AppImage dist/

    - name: DeployPR (win)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cmake --build . --target package
        mkdir -p dist
        mv ashirt-*.* dist/

    - name: DeployPR (mac)
      if: |
        matrix.config.os == 'macos-latest' &&
        contains(github.ref, 'tags/v') != true &&
        contains(github.ref, 'refs/heads/main') != true &&
        contains(github.ref, 'refs/heads/release') != true
      run: |
        macdeployqt ashirt.app -dmg
        mkdir -p dist
        cp ashirt.dmg dist/ashirt.dmg
        cp LICENSE dist/LICENSE
        cp README.md dist/README.md

    - name: Import Code-Signing Certificates
      if: |
        matrix.config.os == 'macos-latest' &&
        (contains(github.ref, 'tags/v') || github.ref == 'refs/heads/main' || contains(github.ref, 'refs/heads/release'))
      uses: Apple-Actions/import-codesign-certs@v1.0.4
      with:
        p12-file-base64: ${{ secrets.MACOS_CERT }}
        p12-password: ${{ secrets.MACOS_PASS }}

    - name: Sign Release (mac)
      if: |
        matrix.config.os == 'macos-latest' &&
        (contains(github.ref, 'tags/v') || github.ref == 'refs/heads/main' || contains(github.ref, 'refs/heads/release'))
      run: |
        macdeployqt ashirt.app -dmg -always-overwrite -sign-for-notarization="John Kennedy"
        mkdir -p dist
        cp ashirt.dmg dist/ashirt.dmg
        cp LICENSE dist/LICENSE
        cp README.md dist/README.md

    - name: Install gon via HomeBrew and Notarize (mac)
      if: |
        matrix.config.os == 'macos-latest' &&
        (contains(github.ref, 'tags/v') || github.ref == 'refs/heads/main' || contains(github.ref, 'refs/heads/release'))
      env: 
        GON_CONF: ${{ secrets.GON_CONF }}
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon
        echo "$GON_CONF" | base64 -D -i - > notarize.json
        gon notarize.json

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.name }}
        path: dist

  release:
    name: Create GitHub Release
    if: contains(github.ref, 'tags/v')
    needs: [store-sha8, build]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  publish:
    if: contains(github.ref, 'tags/v')
    needs: [store-sha8, build, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [macOS, Linux, Windows]
    steps:
      - name: Set Version
        run: echo "version=$(echo ${{ github.ref }} | cut -d'/' -f3 | cut -c2-)" >> $GITHUB_ENV
      - name: Download Previous Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ashirt-${{ needs.store-sha8.outputs.sha8 }}-${{ matrix.platform }}
          path: ashirt-${{ env.version }}-${{ matrix.platform }}
      - name: Produce Zip
        run: zip -r ashirt-${{ env.version }}-${{ matrix.platform }}.zip ashirt-${{ env.version }}-${{ matrix.platform }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ashirt-${{ env.version }}-${{ matrix.platform }}.zip
          asset_name: ashirt-${{ env.version }}-${{ matrix.platform }}.zip
          asset_content_type: application/zip
